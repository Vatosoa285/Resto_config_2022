{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar dims = Dimensions.get(\"window\");\n\nvar Toast = function Toast(props) {\n  var id = props.id,\n      onDestroy = props.onDestroy,\n      icon = props.icon,\n      _props$type = props.type,\n      type = _props$type === void 0 ? \"normal\" : _props$type,\n      message = props.message,\n      _props$duration = props.duration,\n      duration = _props$duration === void 0 ? 5000 : _props$duration,\n      style = props.style,\n      textStyle = props.textStyle,\n      _props$animationDurat = props.animationDuration,\n      animationDuration = _props$animationDurat === void 0 ? 250 : _props$animationDurat,\n      _props$animationType = props.animationType,\n      animationType = _props$animationType === void 0 ? \"slide-in\" : _props$animationType,\n      successIcon = props.successIcon,\n      dangerIcon = props.dangerIcon,\n      warningIcon = props.warningIcon,\n      successColor = props.successColor,\n      dangerColor = props.dangerColor,\n      warningColor = props.warningColor,\n      normalColor = props.normalColor,\n      placement = props.placement,\n      _onPress = props.onPress;\n  var containerRef = useRef(null);\n\n  var _useState = useState(new Animated.Value(0)),\n      _useState2 = _slicedToArray(_useState, 1),\n      animation = _useState2[0];\n\n  var panResponderRef = useRef();\n  var panResponderAnimRef = useRef();\n  var closeTimeoutRef = useRef(null);\n  useEffect(function () {\n    Animated.timing(animation, {\n      toValue: 1,\n      useNativeDriver: true,\n      duration: animationDuration\n    }).start();\n\n    if (duration !== 0 && typeof duration === \"number\") {\n      closeTimeoutRef.current = setTimeout(function () {\n        handleClose();\n      }, duration);\n    }\n\n    return function () {\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\n    };\n  }, []);\n  useEffect(function () {\n    if (!props.open) {\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\n      handleClose();\n    }\n  }, [props.open]);\n\n  var handleClose = function handleClose() {\n    Animated.timing(animation, {\n      toValue: 0,\n      useNativeDriver: true,\n      duration: animationDuration\n    }).start(function () {\n      return onDestroy();\n    });\n  };\n\n  var panReleaseToLeft = function panReleaseToLeft(gestureState) {\n    Animated.timing(getPanResponderAnim(), {\n      toValue: {\n        x: -dims.width / 10 * 9,\n        y: gestureState.dy\n      },\n      useNativeDriver: true,\n      duration: 250\n    }).start(function () {\n      return onDestroy();\n    });\n  };\n\n  var panReleaseToRight = function panReleaseToRight(gestureState) {\n    Animated.timing(getPanResponderAnim(), {\n      toValue: {\n        x: dims.width / 10 * 9,\n        y: gestureState.dy\n      },\n      useNativeDriver: true,\n      duration: 250\n    }).start(function () {\n      return onDestroy();\n    });\n  };\n\n  var getPanResponder = function getPanResponder() {\n    if (panResponderRef.current) return panResponderRef.current;\n    panResponderRef.current = PanResponder.create({\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(_, gestureState) {\n        return !(gestureState.dx === 0 && gestureState.dy === 0);\n      },\n      onPanResponderMove: function onPanResponderMove(_, gestureState) {\n        var _getPanResponderAnim;\n\n        (_getPanResponderAnim = getPanResponderAnim()) === null || _getPanResponderAnim === void 0 ? void 0 : _getPanResponderAnim.setValue({\n          x: gestureState.dx,\n          y: gestureState.dy\n        });\n      },\n      onPanResponderRelease: function onPanResponderRelease(_, gestureState) {\n        if (gestureState.dx > 50) {\n          panReleaseToRight(gestureState);\n        } else if (gestureState.dx < -50) {\n          panReleaseToLeft(gestureState);\n        } else {\n          Animated.spring(getPanResponderAnim(), {\n            toValue: {\n              x: 0,\n              y: 0\n            },\n            useNativeDriver: true\n          }).start();\n        }\n      }\n    });\n    return panResponderRef.current;\n  };\n\n  var getPanResponderAnim = function getPanResponderAnim() {\n    if (panResponderAnimRef.current) return panResponderAnimRef.current;\n    panResponderAnimRef.current = new Animated.ValueXY({\n      x: 0,\n      y: 0\n    });\n    return panResponderAnimRef.current;\n  };\n\n  if (icon === undefined) {\n    switch (type) {\n      case \"success\":\n        {\n          if (successIcon) {\n            icon = successIcon;\n          }\n\n          break;\n        }\n\n      case \"danger\":\n        {\n          if (dangerIcon) {\n            icon = dangerIcon;\n          }\n\n          break;\n        }\n\n      case \"warning\":\n        {\n          if (warningIcon) {\n            icon = warningIcon;\n          }\n\n          break;\n        }\n    }\n  }\n\n  var backgroundColor = \"\";\n\n  switch (type) {\n    case \"success\":\n      backgroundColor = successColor || \"#00C851\";\n      break;\n\n    case \"danger\":\n      backgroundColor = dangerColor || \"#ff4444\";\n      break;\n\n    case \"warning\":\n      backgroundColor = warningColor || \"#ffbb33\";\n      break;\n\n    default:\n      backgroundColor = normalColor || \"#333\";\n  }\n\n  var animationStyle = {\n    opacity: animation,\n    transform: [{\n      translateY: animation.interpolate({\n        inputRange: [0, 1],\n        outputRange: placement === \"bottom\" ? [20, 0] : [-20, 0]\n      })\n    }, getPanResponderAnim().getTranslateTransform()[0]]\n  };\n\n  if (animationType === \"zoom-in\") {\n    var _animationStyle$trans;\n\n    (_animationStyle$trans = animationStyle.transform) === null || _animationStyle$trans === void 0 ? void 0 : _animationStyle$trans.push({\n      scale: animation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0.7, 1]\n      })\n    });\n  }\n\n  return React.createElement(Animated.View, _extends({\n    ref: containerRef\n  }, getPanResponder().panHandlers, {\n    style: [styles.container, animationStyle]\n  }), props.renderType && props.renderType[type] ? props.renderType[type](props) : props.renderToast ? props.renderToast(props) : React.createElement(TouchableWithoutFeedback, {\n    disabled: !_onPress,\n    onPress: function onPress() {\n      return _onPress && _onPress(id);\n    }\n  }, React.createElement(View, {\n    style: [styles.toastContainer, {\n      backgroundColor: backgroundColor\n    }, style]\n  }, icon ? React.createElement(View, {\n    style: styles.iconContainer\n  }, icon) : null, React.isValidElement(message) ? message : React.createElement(Text, {\n    style: [styles.message, textStyle]\n  }, message))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    alignItems: \"center\"\n  },\n  toastContainer: {\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    borderRadius: 5,\n    marginVertical: 5,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    maxWidth: dims.width / 10 * 9,\n    overflow: \"hidden\"\n  },\n  message: {\n    color: \"#fff\",\n    fontWeight: \"500\"\n  },\n  iconContainer: {\n    marginRight: 5\n  }\n});\nexport default Toast;","map":{"version":3,"sources":["toast.tsx"],"names":["dims","Dimensions","Toast","props","type","duration","animationDuration","animationType","onPress","containerRef","useRef","useState","Animated","panResponderRef","panResponderAnimRef","closeTimeoutRef","useEffect","toValue","useNativeDriver","setTimeout","handleClose","clearTimeout","onDestroy","panReleaseToLeft","gestureState","getPanResponderAnim","x","y","dy","panReleaseToRight","getPanResponder","onMoveShouldSetPanResponder","onPanResponderMove","onPanResponderRelease","icon","backgroundColor","successColor","dangerColor","warningColor","normalColor","animationStyle","opacity","transform","translateY","inputRange","outputRange","placement","scale","styles","iconContainer","container","width","alignItems","toastContainer","paddingHorizontal","paddingVertical","borderRadius","marginVertical","flexDirection","maxWidth","overflow","message","color","fontWeight","marginRight"],"mappings":"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","sourcesContent":["import React, { FC, useRef, useEffect, useState } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Animated,\r\n  StyleProp,\r\n  ViewStyle,\r\n  TextStyle,\r\n  Text,\r\n  TouchableWithoutFeedback,\r\n  PanResponder,\r\n  PanResponderInstance,\r\n  Dimensions,\r\n  PanResponderGestureState,\r\n} from \"react-native\";\r\n\r\nconst dims = Dimensions.get(\"window\");\r\n\r\nexport interface ToastOptions {\r\n  /**\r\n   * Id is optional, you may provide an id only if you want to update toast later using toast.update()\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * Customize toast icon\r\n   */\r\n  icon?: JSX.Element;\r\n\r\n  /**\r\n   * Toast types, You can implement your custom types with JSX using renderType method on ToastContainer.\r\n   */\r\n  type?: \"normal\" | \"success\" | \"danger\" | \"warning\" | string;\r\n\r\n  /**\r\n   * In ms, How long toast will stay before it go away\r\n   */\r\n  duration?: number;\r\n\r\n  /**\r\n   * Customize when toast should be placed\r\n   */\r\n  placement?: \"top\" | \"bottom\";\r\n\r\n  /**\r\n   * Customize style of toast\r\n   */\r\n  style?: StyleProp<ViewStyle>;\r\n\r\n  /**\r\n   * Customize style of toast text\r\n   */\r\n  textStyle?: StyleProp<TextStyle>;\r\n\r\n  /**\r\n   * Customize how fast toast will show and hide\r\n   */\r\n  animationDuration?: number;\r\n\r\n  /**\r\n   * Customize how toast is animated when added or removed\r\n   */\r\n  animationType?: \"slide-in\" | \"zoom-in\";\r\n\r\n  /**\r\n   * Customize success type icon\r\n   */\r\n  successIcon?: JSX.Element;\r\n\r\n  /**\r\n   * Customize danger type icon\r\n   */\r\n  dangerIcon?: JSX.Element;\r\n\r\n  /**\r\n   * Customize warning type icon\r\n   */\r\n  warningIcon?: JSX.Element;\r\n\r\n  /**\r\n   * Customize success type color. changes toast background color\r\n   */\r\n  successColor?: string;\r\n\r\n  /**\r\n   * Customize danger type color. changes toast background color\r\n   */\r\n  dangerColor?: string;\r\n\r\n  /**\r\n   * Customize warning type color. changes toast background color\r\n   */\r\n  warningColor?: string;\r\n\r\n  /**\r\n   * Customize normal type color. changes toast background color\r\n   */\r\n  normalColor?: string;\r\n\r\n  /**\r\n   * Register event for when toast is pressed. If you're using a custom toast you have to pass this to a Touchable.\r\n   */\r\n  onPress?(id: string): void;\r\n\r\n  /**\r\n   * Payload data for custom toasts. You can pass whatever you want\r\n   */\r\n  data?: any;\r\n}\r\n\r\nexport interface ToastProps extends ToastOptions {\r\n  id: string;\r\n  onDestroy(): void;\r\n  message: string | JSX.Element;\r\n  open: boolean;\r\n  renderToast?(toast: ToastProps): JSX.Element;\r\n  renderType?: { [type: string]: (toast: ToastProps) => JSX.Element };\r\n  onHide(): void;\r\n}\r\n\r\nconst Toast: FC<ToastProps> = (props) => {\r\n  let {\r\n    id,\r\n    onDestroy,\r\n    icon,\r\n    type = \"normal\",\r\n    message,\r\n    duration = 5000,\r\n    style,\r\n    textStyle,\r\n    animationDuration = 250,\r\n    animationType = \"slide-in\",\r\n    successIcon,\r\n    dangerIcon,\r\n    warningIcon,\r\n\r\n    successColor,\r\n    dangerColor,\r\n    warningColor,\r\n    normalColor,\r\n\r\n    placement,\r\n\r\n    onPress,\r\n  } = props;\r\n\r\n  const containerRef = useRef<View>(null);\r\n  const [animation] = useState(new Animated.Value(0));\r\n  const panResponderRef = useRef<PanResponderInstance>();\r\n  const panResponderAnimRef = useRef<Animated.ValueXY>();\r\n  const closeTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  useEffect(() => {\r\n    Animated.timing(animation, {\r\n      toValue: 1,\r\n      useNativeDriver: true,\r\n      duration: animationDuration,\r\n    }).start();\r\n    if (duration !== 0 && typeof duration === \"number\") {\r\n      closeTimeoutRef.current = setTimeout(() => {\r\n        handleClose();\r\n      }, duration);\r\n    }\r\n\r\n    return () => {\r\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\r\n    };\r\n  }, []);\r\n\r\n  // Handles hide & hideAll\r\n  useEffect(() => {\r\n    if (!props.open) {\r\n      // Unregister close timeout\r\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\r\n\r\n      // Close animation them remove from stack.\r\n      handleClose();\r\n    }\r\n  }, [props.open]);\r\n\r\n  const handleClose = () => {\r\n    Animated.timing(animation, {\r\n      toValue: 0,\r\n      useNativeDriver: true,\r\n      duration: animationDuration,\r\n    }).start(() => onDestroy());\r\n  };\r\n\r\n  const panReleaseToLeft = (gestureState: PanResponderGestureState) => {\r\n    Animated.timing(getPanResponderAnim(), {\r\n      toValue: { x: (-dims.width / 10) * 9, y: gestureState.dy },\r\n      useNativeDriver: true,\r\n      duration: 250,\r\n    }).start(() => onDestroy());\r\n  };\r\n\r\n  const panReleaseToRight = (gestureState: PanResponderGestureState) => {\r\n    Animated.timing(getPanResponderAnim(), {\r\n      toValue: { x: (dims.width / 10) * 9, y: gestureState.dy },\r\n      useNativeDriver: true,\r\n      duration: 250,\r\n    }).start(() => onDestroy());\r\n  };\r\n\r\n  const getPanResponder = () => {\r\n    if (panResponderRef.current) return panResponderRef.current;\r\n    panResponderRef.current = PanResponder.create({\r\n      onMoveShouldSetPanResponder: (_, gestureState) => {\r\n        //return true if user is swiping, return false if it's a single click\r\n        return !(gestureState.dx === 0 && gestureState.dy === 0);\r\n      },\r\n      onPanResponderMove: (_, gestureState) => {\r\n        getPanResponderAnim()?.setValue({\r\n          x: gestureState.dx,\r\n          y: gestureState.dy,\r\n        });\r\n      },\r\n      onPanResponderRelease: (_, gestureState) => {\r\n        if (gestureState.dx > 50) {\r\n          panReleaseToRight(gestureState);\r\n        } else if (gestureState.dx < -50) {\r\n          panReleaseToLeft(gestureState);\r\n        } else {\r\n          Animated.spring(getPanResponderAnim(), {\r\n            toValue: { x: 0, y: 0 },\r\n            useNativeDriver: true,\r\n          }).start();\r\n        }\r\n      },\r\n    });\r\n    return panResponderRef.current;\r\n  };\r\n\r\n  const getPanResponderAnim = () => {\r\n    if (panResponderAnimRef.current) return panResponderAnimRef.current;\r\n    panResponderAnimRef.current = new Animated.ValueXY({ x: 0, y: 0 });\r\n    return panResponderAnimRef.current;\r\n  };\r\n\r\n  if (icon === undefined) {\r\n    switch (type) {\r\n      case \"success\": {\r\n        if (successIcon) {\r\n          icon = successIcon;\r\n        }\r\n        break;\r\n      }\r\n\r\n      case \"danger\": {\r\n        if (dangerIcon) {\r\n          icon = dangerIcon;\r\n        }\r\n        break;\r\n      }\r\n      case \"warning\": {\r\n        if (warningIcon) {\r\n          icon = warningIcon;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  let backgroundColor = \"\";\r\n  switch (type) {\r\n    case \"success\":\r\n      backgroundColor = successColor || \"#00C851\";\r\n      break;\r\n    case \"danger\":\r\n      backgroundColor = dangerColor || \"#ff4444\";\r\n      break;\r\n    case \"warning\":\r\n      backgroundColor = warningColor || \"#ffbb33\";\r\n      break;\r\n    default:\r\n      backgroundColor = normalColor || \"#333\";\r\n  }\r\n\r\n  const animationStyle: Animated.WithAnimatedObject<ViewStyle> = {\r\n    opacity: animation,\r\n    transform: [\r\n      {\r\n        translateY: animation.interpolate({\r\n          inputRange: [0, 1],\r\n          outputRange: placement === \"bottom\" ? [20, 0] : [-20, 0], // 0 : 150, 0.5 : 75, 1 : 0\r\n        }),\r\n      },\r\n      getPanResponderAnim().getTranslateTransform()[0],\r\n    ],\r\n  };\r\n\r\n  if (animationType === \"zoom-in\") {\r\n    animationStyle.transform?.push({\r\n      scale: animation.interpolate({\r\n        inputRange: [0, 1],\r\n        outputRange: [0.7, 1],\r\n      }),\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Animated.View\r\n      ref={containerRef}\r\n      {...getPanResponder().panHandlers}\r\n      style={[styles.container, animationStyle]}\r\n    >\r\n      {props.renderType && props.renderType[type] ? (\r\n        props.renderType[type](props)\r\n      ) : props.renderToast ? (\r\n        props.renderToast(props)\r\n      ) : (\r\n        <TouchableWithoutFeedback\r\n          disabled={!onPress}\r\n          onPress={() => onPress && onPress(id)}\r\n        >\r\n          <View style={[styles.toastContainer, { backgroundColor }, style]}>\r\n            {icon ? <View style={styles.iconContainer}>{icon}</View> : null}\r\n            {React.isValidElement(message) ? (\r\n              message\r\n            ) : (\r\n              <Text style={[styles.message, textStyle]}>{message}</Text>\r\n            )}\r\n          </View>\r\n        </TouchableWithoutFeedback>\r\n      )}\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: { width: \"100%\", alignItems: \"center\" },\r\n  toastContainer: {\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 12,\r\n    borderRadius: 5,\r\n    marginVertical: 5,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    maxWidth: (dims.width / 10) * 9,\r\n    overflow: \"hidden\",\r\n  },\r\n  message: {\r\n    color: \"#fff\",\r\n    fontWeight: \"500\",\r\n  },\r\n  iconContainer: {\r\n    marginRight: 5,\r\n  },\r\n});\r\n\r\nexport default Toast;\r\n"]},"metadata":{},"sourceType":"module"}