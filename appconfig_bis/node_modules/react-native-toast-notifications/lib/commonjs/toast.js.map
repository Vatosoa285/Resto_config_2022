{"version":3,"sources":["toast.tsx"],"names":["dims","Dimensions","get","Toast","props","id","onDestroy","icon","type","message","duration","style","textStyle","animationDuration","animationType","successIcon","dangerIcon","warningIcon","successColor","dangerColor","warningColor","normalColor","placement","onPress","containerRef","animation","Animated","Value","panResponderRef","panResponderAnimRef","closeTimeoutRef","timing","toValue","useNativeDriver","start","current","setTimeout","handleClose","clearTimeout","open","panReleaseToLeft","gestureState","getPanResponderAnim","x","width","y","dy","panReleaseToRight","getPanResponder","PanResponder","create","onMoveShouldSetPanResponder","_","dx","onPanResponderMove","setValue","onPanResponderRelease","spring","ValueXY","undefined","backgroundColor","animationStyle","opacity","transform","translateY","interpolate","inputRange","outputRange","getTranslateTransform","push","scale","panHandlers","styles","container","renderType","renderToast","toastContainer","iconContainer","isValidElement","StyleSheet","alignItems","paddingHorizontal","paddingVertical","borderRadius","marginVertical","flexDirection","maxWidth","overflow","color","fontWeight","marginRight"],"mappings":"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","sourcesContent":["import React, { FC, useRef, useEffect, useState } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Animated,\r\n  StyleProp,\r\n  ViewStyle,\r\n  TextStyle,\r\n  Text,\r\n  TouchableWithoutFeedback,\r\n  PanResponder,\r\n  PanResponderInstance,\r\n  Dimensions,\r\n  PanResponderGestureState,\r\n} from \"react-native\";\r\n\r\nconst dims = Dimensions.get(\"window\");\r\n\r\nexport interface ToastOptions {\r\n  /**\r\n   * Id is optional, you may provide an id only if you want to update toast later using toast.update()\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * Customize toast icon\r\n   */\r\n  icon?: JSX.Element;\r\n\r\n  /**\r\n   * Toast types, You can implement your custom types with JSX using renderType method on ToastContainer.\r\n   */\r\n  type?: \"normal\" | \"success\" | \"danger\" | \"warning\" | string;\r\n\r\n  /**\r\n   * In ms, How long toast will stay before it go away\r\n   */\r\n  duration?: number;\r\n\r\n  /**\r\n   * Customize when toast should be placed\r\n   */\r\n  placement?: \"top\" | \"bottom\";\r\n\r\n  /**\r\n   * Customize style of toast\r\n   */\r\n  style?: StyleProp<ViewStyle>;\r\n\r\n  /**\r\n   * Customize style of toast text\r\n   */\r\n  textStyle?: StyleProp<TextStyle>;\r\n\r\n  /**\r\n   * Customize how fast toast will show and hide\r\n   */\r\n  animationDuration?: number;\r\n\r\n  /**\r\n   * Customize how toast is animated when added or removed\r\n   */\r\n  animationType?: \"slide-in\" | \"zoom-in\";\r\n\r\n  /**\r\n   * Customize success type icon\r\n   */\r\n  successIcon?: JSX.Element;\r\n\r\n  /**\r\n   * Customize danger type icon\r\n   */\r\n  dangerIcon?: JSX.Element;\r\n\r\n  /**\r\n   * Customize warning type icon\r\n   */\r\n  warningIcon?: JSX.Element;\r\n\r\n  /**\r\n   * Customize success type color. changes toast background color\r\n   */\r\n  successColor?: string;\r\n\r\n  /**\r\n   * Customize danger type color. changes toast background color\r\n   */\r\n  dangerColor?: string;\r\n\r\n  /**\r\n   * Customize warning type color. changes toast background color\r\n   */\r\n  warningColor?: string;\r\n\r\n  /**\r\n   * Customize normal type color. changes toast background color\r\n   */\r\n  normalColor?: string;\r\n\r\n  /**\r\n   * Register event for when toast is pressed. If you're using a custom toast you have to pass this to a Touchable.\r\n   */\r\n  onPress?(id: string): void;\r\n\r\n  /**\r\n   * Payload data for custom toasts. You can pass whatever you want\r\n   */\r\n  data?: any;\r\n}\r\n\r\nexport interface ToastProps extends ToastOptions {\r\n  id: string;\r\n  onDestroy(): void;\r\n  message: string | JSX.Element;\r\n  open: boolean;\r\n  renderToast?(toast: ToastProps): JSX.Element;\r\n  renderType?: { [type: string]: (toast: ToastProps) => JSX.Element };\r\n  onHide(): void;\r\n}\r\n\r\nconst Toast: FC<ToastProps> = (props) => {\r\n  let {\r\n    id,\r\n    onDestroy,\r\n    icon,\r\n    type = \"normal\",\r\n    message,\r\n    duration = 5000,\r\n    style,\r\n    textStyle,\r\n    animationDuration = 250,\r\n    animationType = \"slide-in\",\r\n    successIcon,\r\n    dangerIcon,\r\n    warningIcon,\r\n\r\n    successColor,\r\n    dangerColor,\r\n    warningColor,\r\n    normalColor,\r\n\r\n    placement,\r\n\r\n    onPress,\r\n  } = props;\r\n\r\n  const containerRef = useRef<View>(null);\r\n  const [animation] = useState(new Animated.Value(0));\r\n  const panResponderRef = useRef<PanResponderInstance>();\r\n  const panResponderAnimRef = useRef<Animated.ValueXY>();\r\n  const closeTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  useEffect(() => {\r\n    Animated.timing(animation, {\r\n      toValue: 1,\r\n      useNativeDriver: true,\r\n      duration: animationDuration,\r\n    }).start();\r\n    if (duration !== 0 && typeof duration === \"number\") {\r\n      closeTimeoutRef.current = setTimeout(() => {\r\n        handleClose();\r\n      }, duration);\r\n    }\r\n\r\n    return () => {\r\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\r\n    };\r\n  }, []);\r\n\r\n  // Handles hide & hideAll\r\n  useEffect(() => {\r\n    if (!props.open) {\r\n      // Unregister close timeout\r\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\r\n\r\n      // Close animation them remove from stack.\r\n      handleClose();\r\n    }\r\n  }, [props.open]);\r\n\r\n  const handleClose = () => {\r\n    Animated.timing(animation, {\r\n      toValue: 0,\r\n      useNativeDriver: true,\r\n      duration: animationDuration,\r\n    }).start(() => onDestroy());\r\n  };\r\n\r\n  const panReleaseToLeft = (gestureState: PanResponderGestureState) => {\r\n    Animated.timing(getPanResponderAnim(), {\r\n      toValue: { x: (-dims.width / 10) * 9, y: gestureState.dy },\r\n      useNativeDriver: true,\r\n      duration: 250,\r\n    }).start(() => onDestroy());\r\n  };\r\n\r\n  const panReleaseToRight = (gestureState: PanResponderGestureState) => {\r\n    Animated.timing(getPanResponderAnim(), {\r\n      toValue: { x: (dims.width / 10) * 9, y: gestureState.dy },\r\n      useNativeDriver: true,\r\n      duration: 250,\r\n    }).start(() => onDestroy());\r\n  };\r\n\r\n  const getPanResponder = () => {\r\n    if (panResponderRef.current) return panResponderRef.current;\r\n    panResponderRef.current = PanResponder.create({\r\n      onMoveShouldSetPanResponder: (_, gestureState) => {\r\n        //return true if user is swiping, return false if it's a single click\r\n        return !(gestureState.dx === 0 && gestureState.dy === 0);\r\n      },\r\n      onPanResponderMove: (_, gestureState) => {\r\n        getPanResponderAnim()?.setValue({\r\n          x: gestureState.dx,\r\n          y: gestureState.dy,\r\n        });\r\n      },\r\n      onPanResponderRelease: (_, gestureState) => {\r\n        if (gestureState.dx > 50) {\r\n          panReleaseToRight(gestureState);\r\n        } else if (gestureState.dx < -50) {\r\n          panReleaseToLeft(gestureState);\r\n        } else {\r\n          Animated.spring(getPanResponderAnim(), {\r\n            toValue: { x: 0, y: 0 },\r\n            useNativeDriver: true,\r\n          }).start();\r\n        }\r\n      },\r\n    });\r\n    return panResponderRef.current;\r\n  };\r\n\r\n  const getPanResponderAnim = () => {\r\n    if (panResponderAnimRef.current) return panResponderAnimRef.current;\r\n    panResponderAnimRef.current = new Animated.ValueXY({ x: 0, y: 0 });\r\n    return panResponderAnimRef.current;\r\n  };\r\n\r\n  if (icon === undefined) {\r\n    switch (type) {\r\n      case \"success\": {\r\n        if (successIcon) {\r\n          icon = successIcon;\r\n        }\r\n        break;\r\n      }\r\n\r\n      case \"danger\": {\r\n        if (dangerIcon) {\r\n          icon = dangerIcon;\r\n        }\r\n        break;\r\n      }\r\n      case \"warning\": {\r\n        if (warningIcon) {\r\n          icon = warningIcon;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  let backgroundColor = \"\";\r\n  switch (type) {\r\n    case \"success\":\r\n      backgroundColor = successColor || \"#00C851\";\r\n      break;\r\n    case \"danger\":\r\n      backgroundColor = dangerColor || \"#ff4444\";\r\n      break;\r\n    case \"warning\":\r\n      backgroundColor = warningColor || \"#ffbb33\";\r\n      break;\r\n    default:\r\n      backgroundColor = normalColor || \"#333\";\r\n  }\r\n\r\n  const animationStyle: Animated.WithAnimatedObject<ViewStyle> = {\r\n    opacity: animation,\r\n    transform: [\r\n      {\r\n        translateY: animation.interpolate({\r\n          inputRange: [0, 1],\r\n          outputRange: placement === \"bottom\" ? [20, 0] : [-20, 0], // 0 : 150, 0.5 : 75, 1 : 0\r\n        }),\r\n      },\r\n      getPanResponderAnim().getTranslateTransform()[0],\r\n    ],\r\n  };\r\n\r\n  if (animationType === \"zoom-in\") {\r\n    animationStyle.transform?.push({\r\n      scale: animation.interpolate({\r\n        inputRange: [0, 1],\r\n        outputRange: [0.7, 1],\r\n      }),\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Animated.View\r\n      ref={containerRef}\r\n      {...getPanResponder().panHandlers}\r\n      style={[styles.container, animationStyle]}\r\n    >\r\n      {props.renderType && props.renderType[type] ? (\r\n        props.renderType[type](props)\r\n      ) : props.renderToast ? (\r\n        props.renderToast(props)\r\n      ) : (\r\n        <TouchableWithoutFeedback\r\n          disabled={!onPress}\r\n          onPress={() => onPress && onPress(id)}\r\n        >\r\n          <View style={[styles.toastContainer, { backgroundColor }, style]}>\r\n            {icon ? <View style={styles.iconContainer}>{icon}</View> : null}\r\n            {React.isValidElement(message) ? (\r\n              message\r\n            ) : (\r\n              <Text style={[styles.message, textStyle]}>{message}</Text>\r\n            )}\r\n          </View>\r\n        </TouchableWithoutFeedback>\r\n      )}\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: { width: \"100%\", alignItems: \"center\" },\r\n  toastContainer: {\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 12,\r\n    borderRadius: 5,\r\n    marginVertical: 5,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    maxWidth: (dims.width / 10) * 9,\r\n    overflow: \"hidden\",\r\n  },\r\n  message: {\r\n    color: \"#fff\",\r\n    fontWeight: \"500\",\r\n  },\r\n  iconContainer: {\r\n    marginRight: 5,\r\n  },\r\n});\r\n\r\nexport default Toast;\r\n"]}